/**
 * EmbeddingGenerator - Handles core embedding generation operations
 * Follows Single Responsibility Principle by focusing only on embedding generation
 */

import { IEmbeddingProvider } from '../../interfaces/IEmbeddingProvider';

export class EmbeddingGenerator {
  private embeddingProvider: IEmbeddingProvider | null;

  constructor(embeddingProvider: IEmbeddingProvider | null = null) {
    this.embeddingProvider = embeddingProvider;
  }

  /**
   * Set the embedding provider
   */
  setProvider(provider: IEmbeddingProvider | null): void {
    this.embeddingProvider = provider;
  }

  /**
   * Get the current embedding provider
   */
  getProvider(): IEmbeddingProvider | null {
    return this.embeddingProvider;
  }

  /**
   * Check if embedding generation is available
   */
  isAvailable(): boolean {
    return this.embeddingProvider !== null;
  }

  /**
   * Generate embedding for a single text
   * @param text Text to generate embedding for
   * @returns Promise resolving to embedding array or null if unavailable
   */
  async generateSingle(text: string): Promise<number[] | null> {
    if (!this.embeddingProvider) {
      return null;
    }

    try {
      const embeddings = await this.embeddingProvider.generateEmbeddings([text]);
      return embeddings[0];
    } catch (error) {
      console.error('Error generating single embedding:', error);
      return null;
    }
  }

  /**
   * Generate embeddings for multiple texts
   * @param texts Array of texts to generate embeddings for
   * @returns Promise resolving to array of embeddings or null if unavailable
   */
  async generateBatch(texts: string[]): Promise<number[][] | null> {
    if (!this.embeddingProvider || texts.length === 0) {
      return null;
    }

    try {
      return await this.embeddingProvider.generateEmbeddings(texts);
    } catch (error) {
      console.error('Error generating batch embeddings:', error);
      return null;
    }
  }

  /**
   * Calculate similarity between two embeddings
   * @param embedding1 First embedding
   * @param embedding2 Second embedding
   * @returns Similarity score
   */
  calculateSimilarity(embedding1: number[], embedding2: number[]): number {
    if (!this.embeddingProvider) {
      throw new Error('Embedding provider not initialized');
    }
    return this.embeddingProvider.calculateSimilarity(embedding1, embedding2);
  }

  /**
   * Get the dimensions of embeddings generated by this provider
   * @returns Number of dimensions or null if provider not available
   */
  getDimensions(): number | null {
    if (!this.embeddingProvider) {
      return null;
    }
    
    // Try to get dimensions from provider if available
    if ('getDimensions' in this.embeddingProvider && typeof this.embeddingProvider.getDimensions === 'function') {
      return (this.embeddingProvider as any).getDimensions();
    }
    
    return null;
  }

  /**
   * Validate that the provider is properly initialized
   * @throws Error if provider is not available or not properly initialized
   */
  validateProvider(): void {
    if (!this.embeddingProvider) {
      throw new Error('Embedding provider not initialized');
    }
  }
}