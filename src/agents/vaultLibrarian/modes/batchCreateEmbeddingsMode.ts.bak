import { TFolder, App } from 'obsidian';
import { BaseMode } from '../../baseMode';
import { BatchCreateEmbeddingsParams, BatchCreateEmbeddingsResult } from '../types';
import { VaultLibrarianAgent } from '../vaultLibrarian';
import { parseWorkspaceContext } from '../../../utils/contextUtils';
import { EmbeddingService } from '../../../database/services/EmbeddingService';
import { ChromaSearchService } from '../../../database/services/ChromaSearchService';
import { MemoryService } from '../../../database/services/MemoryService';
import { ProgressTracker } from '../../../database/utils/progressTracker';

/**
 * Mode for batch creating embeddings for multiple files
 */
export class BatchCreateEmbeddingsMode extends BaseMode<BatchCreateEmbeddingsParams, BatchCreateEmbeddingsResult> {
  private embeddingService: EmbeddingService | null = null;
  private searchService: ChromaSearchService | null = null;
  private memoryService: MemoryService | null = null;
  private progressTracker: ProgressTracker;
  
  /**
   * Create a new BatchCreateEmbeddingsMode
   * @param app Obsidian app instance
   */
  constructor(private app: App) {
    super(
      'batchCreateEmbeddings',
      'Batch Create Embeddings',
      'Index multiple files for semantic search',
      '1.0.0'
    );
    
    // Initialize progress tracker
    this.progressTracker = new ProgressTracker();
    
    // Initialize ChromaDB services if available
    try {
      const plugin = this.app.plugins?.getPlugin('claudesidian-mcp');
      
      if (plugin?.services) {
        if (plugin.services.embeddingService) {
          this.embeddingService = plugin.services.embeddingService;
        }
        
        if (plugin.services.searchService) {
          this.searchService = plugin.services.searchService;
        }
        
        if (plugin.services.memoryService) {
          this.memoryService = plugin.services.memoryService;
        }
      }
      
      // Get services from the plugin if possible
    } catch (error) {
      console.error("Failed to initialize services:", error);
    }
  }
  
  /**
   * Execute the mode
   * @param params Mode parameters
   * @returns Promise that resolves with result
   */
  async execute(params: BatchCreateEmbeddingsParams): Promise<BatchCreateEmbeddingsResult> {
    // Generate an operation ID for this batch
    const operationId = `batch-embeddings-${Date.now()}`;
    
    try {
      const { filePaths, force, workspaceContext, handoff } = params;
      
      if (!filePaths || !Array.isArray(filePaths) || filePaths.length === 0) {
        return this.prepareResult(false, undefined, 'File paths array is required and must not be empty');
      }
      
      // Parse workspace context early for use throughout the method
      const parsedContext = parseWorkspaceContext(workspaceContext);
      
      // Try to get ChromaDB services if not already available
      if (!this.searchService || !this.embeddingService) {
        try {
          const plugin = this.app.plugins?.getPlugin('claudesidian-mcp');
          if (plugin?.services) {
            this.searchService = plugin.services.searchService || null;
            this.embeddingService = plugin.services.embeddingService || null;
            this.memoryService = plugin.services.memoryService || null;
          }
        } catch (error) {
          console.error("Failed to get services from plugin:", error);
        }
      }
      
      // Check if services are available after attempt to get them
      if (!this.searchService || !this.embeddingService) {
        return this.prepareResult(false, undefined, 'Required services not available. Please ensure ChromaDB is properly configured.');
      }
      
      // Execute batch embedding
      return await this.executeBatchEmbedding(params, operationId);
    } catch (error) {
      // Ensure progress is completed even on error
      this.completeProgress(false, operationId, error.message);
      
      return this.prepareResult(false, undefined, `Error batch creating embeddings: ${error.message}`);
    }
  }
  
  /**
   * Execute batch embedding operation
   * @param params Mode parameters
   * @param operationId Operation ID for progress tracking
   * @returns Promise that resolves with result
   */
  private async executeBatchEmbedding(
    params: BatchCreateEmbeddingsParams, 
    operationId: string
  ): Promise<BatchCreateEmbeddingsResult> {
    const { filePaths, force, workspaceContext, handoff } = params;
    
    // Parse workspace context
    const parsedContext = parseWorkspaceContext(workspaceContext);
    
    // Check if embedding service is available
    if (!this.embeddingService) {
      return this.prepareResult(false, undefined, 'Embedding service is not available');
    }
    
    if (!this.searchService) {
      return this.prepareResult(false, undefined, 'Search service is not available');
    }
    
    // Check if embeddings are enabled
    if (!this.embeddingService.areEmbeddingsEnabled()) {
      return this.prepareResult(false, undefined, 'Embeddings functionality is currently disabled. Please enable embeddings and provide a valid API key in settings to create embeddings.');
    }
    
    // Validate files exist
    const validFilePaths = [];
    for (const path of filePaths) {
      const file = this.app.vault.getAbstractFileByPath(path);
      // Check if it's a file and has .md extension
      if (file && !(file instanceof TFolder) && path.endsWith('.md')) {
        validFilePaths.push(path);
      }
    }
    
    if (validFilePaths.length === 0) {
      return this.prepareResult(false, undefined, 'No valid markdown files found in the provided paths');
    }
    
    // Initial progress update
    this.updateProgress(0, validFilePaths.length, operationId);
    
    try {
      // Process files with progress updates
      const result = await this.processFilesWithProgress(
        validFilePaths, 
        force || false, 
        operationId, 
        parsedContext?.workspaceId
      );
      
      // Final progress update and completion
      this.updateProgress(result.processed, validFilePaths.length, operationId);
      this.completeProgress(result.failed === 0, operationId,
                           result.failed > 0 ? `Failed to index ${result.failed} files` : undefined);
      
      // Record this activity if in a workspace context
      await this.recordActivity(params, result);
      
      // Prepare result with workspace context
      const response = this.prepareResult(
        result.success,
        {
          results: result.results,
          processed: result.processed,
          failed: result.failed
        },
        undefined,
        workspaceContext
      );
      
      // Handle handoff if requested
      if (handoff) {
        return this.handleHandoff(handoff, response);
      }
      
      return response;
    } catch (error) {
      // Ensure progress is completed on error
      this.completeProgress(false, operationId, error.message);
      
      return this.prepareResult(false, undefined, `Error creating embeddings with ChromaDB: ${error.message}`);
    }
  }
  
  
  /**
   * Process files with progress updates
   * @param filePaths Paths to process
   * @param force Whether to force processing
   * @param operationId Operation ID for progress tracking
   * @param workspaceIdOrVaultLibrarian Optional workspace ID or VaultLibrarian instance
   */
  private async processFilesWithProgress(
    filePaths: string[], 
    force: boolean, 
    operationId: string,
    workspaceIdOrVaultLibrarian?: string | any
  ): Promise<{
    success: boolean;
    results: Array<{
      success: boolean;
      filePath: string;
      chunks?: number;
      error?: string;
    }>;
    processed: number;
    failed: number;
  }> {
    const results = [];
    let processed = 0;
    let failed = 0;
    
    // Determine if the fourth parameter is a VaultLibrarian instance or a workspace ID string
    const isVaultLibrarian = typeof workspaceIdOrVaultLibrarian === 'object';
    const workspaceId = typeof workspaceIdOrVaultLibrarian === 'string' ? workspaceIdOrVaultLibrarian : undefined;
    
    // Get settings from VaultLibrarian or plugin settings
    let batchSize = 10;
    let delay = 1000;
    
    if (isVaultLibrarian) {
      // Get settings from VaultLibrarian
      const vaultLibrarian = workspaceIdOrVaultLibrarian;
      const memorySettings = vaultLibrarian?.settings || {};
      batchSize = memorySettings.batchSize || 10;
      delay = memorySettings.processingDelay || 1000;
    } else {
      // Get settings from plugin
      const plugin = this.app.plugins.getPlugin('claudesidian-mcp');
      const settings = plugin?.settings?.settings?.memory || {};
      batchSize = settings.batchSize || 10;
      delay = settings.processingDelay || 1000;
    }
    
    // Process in smaller batches
    for (let i = 0; i < filePaths.length; i += batchSize) {
      const batch = filePaths.slice(i, i + batchSize);
      
      // Process this batch
      const batchResults = await Promise.all(
        batch.map(async filePath => {
          try {
            if (isVaultLibrarian) {
              // Use VaultLibrarian instance for indexing
              const vaultLibrarian = workspaceIdOrVaultLibrarian;
              const result = await vaultLibrarian.indexFile(filePath, force);
              processed++;
              if (!result.success) failed++;
              
              // Update progress after each file
              this.updateProgress(processed, filePaths.length, operationId);
              
              return result;
            } else {
              // Use ChromaDB search service to index file
              const fileId = await this.searchService!.indexFile(
                filePath,
                workspaceId,
                { force } // Pass metadata with force flag
              );
              
              processed++;
              if (!fileId) failed++;
              
              // Update progress after each file
              this.updateProgress(processed, filePaths.length, operationId);
              
              return {
                success: !!fileId,
                filePath,
                chunks: 1, // Default to 1 chunk for ChromaDB
                error: fileId ? undefined : 'Failed to index file'
              };
            }
          } catch (error) {
            processed++;
            failed++;
            
            // Update progress after each file
            this.updateProgress(processed, filePaths.length, operationId);
            
            return {
              success: false,
              filePath,
              error: error.message
            };
          }
        })
      );
      
      // Add results to the overall results array
      results.push(...batchResults);
      
      // Pause between batches to avoid freezing the UI
      if (i + batchSize < filePaths.length) {
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    }
    
    return {
      success: failed === 0,
      results,
      processed,
      failed
    };
  }
  
  // Placeholder comment - the main implementation is above
}
  
  /**
   * Record batch embedding activity in workspace memory
   */
  private async recordActivity(
    params: BatchCreateEmbeddingsParams,
    result: {
      success: boolean;
      results: Array<{
        success: boolean;
        filePath: string;
        chunks?: number;
        error?: string;
      }>;
      processed: number;
      failed: number;
    }
  ): Promise<void> {
    // Parse workspace context
    const parsedContext = parseWorkspaceContext(params.workspaceContext);
    
    if (!parsedContext?.workspaceId) {
      return; // Skip if no workspace context
    }
    
    // Use memory service directly if available
    if (this.memoryService) {
      try {
        // Create descriptive content
        const successfulFiles = result.results.filter(r => r.success).map(r => r.filePath);
        const failedFiles = result.results.filter(r => !r.success).map(r => r.filePath);
        
        const content = `Batch indexed ${result.processed} files\n` +
                        `Success: ${result.success}\n` +
                        `Files processed: ${result.processed}\n` +
                        `Files failed: ${result.failed}\n` +
                        (successfulFiles.length > 0 ? `Successful files: ${successfulFiles.join(', ')}\n` : '') +
                        (failedFiles.length > 0 ? `Failed files: ${failedFiles.join(', ')}\n` : '');
        
        // Record activity trace using memory service
        await this.memoryService.recordActivityTrace(
          parsedContext.workspaceId,
          {
            type: 'research',
            content,
            metadata: {
              tool: 'BatchCreateEmbeddingsMode',
              params: {
                filePaths: params.filePaths,
                force: params.force
              },
              result: {
                success: result.success,
                processed: result.processed,
                failed: result.failed
              },
              relatedFiles: successfulFiles
            },
            sessionId: params.sessionId
          }
        );
      } catch (error) {
        console.error('Error recording activity with memory service:', error);
      }
    }
  }
  
  /**
   * Update the progress UI
   * @param processed Number of files processed
   * @param total Total number of files
   * @param operationId Operation ID for progress tracking
   */
  private updateProgress(processed: number, total: number, operationId: string): void {
    // Use our progress tracker
    this.progressTracker.updateProgress({
      processed,
      total,
      remaining: total - processed,
      operationId
    });
  }
  
  /**
   * Complete the progress UI
   * @param success Whether processing was successful
   * @param operationId Operation ID for progress tracking
   * @param error Optional error message
   */
  private completeProgress(success: boolean, operationId: string, error?: string): void {
    // Use our progress tracker
    this.progressTracker.completeProgress({
      success,
      processed: 0, // We don't know the exact count here
      failed: 0,
      error,
      operationId
    });
  }
  
  
  /**
   * Get the JSON schema for the mode's parameters
   * @returns JSON schema object
   */
  getParameterSchema(): any {
    return {
      type: 'object',
      properties: {
        filePaths: {
          type: 'array',
          items: {
            type: 'string'
          },
          description: 'Paths to the files to index'
        },
        force: {
          type: 'boolean',
          description: 'Whether to force re-indexing even if files have not changed',
          default: false
        },
        ...this.getCommonParameterSchema()
      },
      required: ['filePaths']
    };
  }
  
  /**
   * Get the JSON schema for the mode's result
   * @returns JSON schema object
   */
  getResultSchema(): any {
    return {
      type: 'object',
      properties: {
        success: {
          type: 'boolean',
          description: 'Whether the operation succeeded overall'
        },
        error: {
          type: 'string',
          description: 'Error message if success is false'
        },
        data: {
          type: 'object',
          properties: {
            results: {
              type: 'array',
              items: {
                type: 'object',
                properties: {
                  success: {
                    type: 'boolean',
                    description: 'Whether this file was indexed successfully'
                  },
                  filePath: {
                    type: 'string',
                    description: 'Path to the indexed file'
                  },
                  chunks: {
                    type: 'number',
                    description: 'Number of chunks created for the file'
                  },
                  error: {
                    type: 'string',
                    description: 'Error message if indexing this file failed'
                  }
                },
                required: ['success', 'filePath']
              },
              description: 'Results for each file'
            },
            processed: {
              type: 'number',
              description: 'Number of files processed'
            },
            failed: {
              type: 'number',
              description: 'Number of files that failed to index'
            }
          },
          required: ['results', 'processed', 'failed']
        },
        workspaceContext: {
          type: 'object',
          properties: {
            workspaceId: {
              type: 'string',
              description: 'ID of the workspace'
            },
            workspacePath: {
              type: 'array',
              items: {
                type: 'string'
              },
              description: 'Path of the workspace'
            },
            activeWorkspace: {
              type: 'boolean',
              description: 'Whether this is the active workspace'
            }
          }
        },
        handoffResult: {
          type: 'object',
          description: 'Result of the handoff operation'
        }
      },
      required: ['success']
    };
  }
}